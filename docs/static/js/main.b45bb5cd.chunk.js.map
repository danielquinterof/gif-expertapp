{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setartists","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","artists","type","value","onChange","target","getGifs","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"yLAGaA,EAAc,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,WAAgB,EACLC,mBAAS,IADJ,mBAClCC,EADkC,KACtBC,EADsB,KAazC,OACI,sBAAMC,SARW,SAAEC,GACnBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAQ,IAC1BR,GAAW,SAAAS,GAAO,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAIlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAfc,SAAEP,GACxBF,EAAcE,EAAEQ,OAAOF,a,+BCPlBG,EAAO,uCAAG,WAAML,GAAN,uBAAAM,EAAA,6DACbC,EADa,iDACmCC,UAAUR,GAD7C,+DAEAS,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KACDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QARvB,kBAWZM,GAXY,4CAAH,sDCEPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEpC,OACI,sBAAKc,UAAU,mDAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCJHO,EAAU,SAAC,GAAe,IAAdxB,EAAa,EAAbA,QAAa,ECDV,SAACA,GAAa,IAAD,EACZR,mBAAS,CAC/BoB,KAAM,GACNa,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAgBtC,OAXCC,qBAAU,WACNvB,EAAQL,GACH6B,MAAK,SAAAC,GACFC,YAAW,WACPJ,EAAU,CACNf,KAAMkB,EACNL,SAAQ,MAEb,UAEZ,CAACzB,IACE0B,EDdyBM,CAAahC,GAAhCkB,EADsB,EAC3BN,KAAaa,EADc,EACdA,QACpB,OACI,qCACI,6BAAKzB,IACL,sBAAKqB,UAAU,YAAf,UACKI,GAAW,mBAAGJ,UAAU,mCAAb,0BAEZH,EAAOJ,KAAK,SAACC,GAAD,OACR,cAAC,EAAD,eAEQA,GADCA,EAAIC,cEVpBiB,EAAgB,WAAO,IAAD,EACDzC,mBAAS,CAAC,iBADT,mBACxBQ,EADwB,KACfT,EADe,KAM/B,OACI,qCACA,8CACA,cAAC,EAAD,CAAaA,WAAYA,IACzB,uBACA,6BAEQS,EAAQc,KAAK,SAACd,GACV,OAAO,cAAC,EAAD,CAAyBA,QAAWA,GAApBA,Y,MCb3CkC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.b45bb5cd.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setartists}) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = ( e )=>{\r\n        setInputValue(e.target.value);\r\n    }\r\n    const handleSubmit = ( e )=>{\r\n        e.preventDefault();\r\n        if( inputValue.trim().length >2){\r\n            setartists(artists => [inputValue, ...artists]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n    return (\r\n        <form onSubmit ={handleSubmit}>\r\n            <input \r\n                type='text'\r\n                value={inputValue}\r\n                onChange={ handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\nAddCategory.propTypes = {\r\n    setartists: PropTypes.func.isRequired,\r\n}\r\n","export const getGifs = async(artists) =>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(artists)}&limit=10&api_key=5r5JNX1LaB5vWzngfq9A0Ay1rBM7yB0J`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n    const gifs = data.map (img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n    //console.log(id, title, url);\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeInBottomLeft\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\nexport const GifGrid = ({artists}) => {\r\n    const {data:images, loading }= useFetchGifs(artists);\r\n    return (\r\n        <>\r\n            <h3>{artists}</h3>\r\n            <div className=\"card-grid\">\r\n                {loading && <p className=\"animate__animated animate__flash\">Cargando....</p>}\r\n                { \r\n                images.map( (img) =>(\r\n                    <GifGridItem\r\n                        key={img.id}\r\n                        {...img }\r\n                    />\r\n                ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import {useState,useEffect} from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\nexport const useFetchGifs = (artists) => {\r\n   const [state, setState] = useState({\r\n       data: [],\r\n       loading: true\r\n   });\r\n    useEffect(() => {\r\n        getGifs(artists)\r\n            .then(imgs=>{\r\n                setTimeout(() => {\r\n                    setState ({\r\n                        data: imgs,\r\n                        loading:false\r\n                    }); \r\n                }, 3000);\r\n            });\r\n    }, [artists]);\r\n   return state;\r\n}\r\n","import React, {useState} from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\nexport const GifExpertApp =  () => {\r\n    const [artists, setartists] = useState(['Selena Gomez']);\r\n    // const handleAdd = () => {\r\n    //     //setartists( [...artists,'Ariana Grande']);\r\n    //     setartists( artists => [...artists,'Ariana Grande']);\r\n    // }\r\n    return(\r\n        <>\r\n        <h2>GifExpertApp</h2>\r\n        <AddCategory setartists={setartists}/>\r\n        <hr/>\r\n        <ol>\r\n           { \r\n                artists.map( (artists)=>{\r\n                    return <GifGrid key = {artists} artists = {artists}/>\r\n                })\r\n           } \r\n        </ol>\r\n        </>\r\n    );\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {GifExpertApp} from './GifExpertApp';\nimport './index.css';\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}